image: public.ecr.aws/sam/build-python3.9:1.70.0-20230113014543

definitions:
  services:
    docker:
      memory: 2048
    postgres:
      image: postgres:alpine
      environment:
        POSTGRES_DB: auth_testing
        POSTGRES_HOST_AUTH_METHOD: trust
  scripts:
    - script: &assume-role |
        echo "assuming role for environment: $ENVIRONMENT"
        if [[ $ENVIRONMENT == development ]]
        then
          export AWS_ACCESS_KEY_ID=$DEVELOPMENT_AWS_ACCESS_KEY_ID
          export AWS_DEFAULT_REGION=$DEVELOPMENT_AWS_DEFAULT_REGION
          export AWS_SECRET_ACCESS_KEY=$DEVELOPMENT_AWS_SECRET_ACCESS_KEY
        else
          export AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID
          export AWS_DEFAULT_REGION=$PRODUCTION_AWS_DEFAULT_REGION
          export AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY
        fi
  steps:
    - step: &set-env
        name: Set the current environment
        artifacts:
          - set_env.sh
    - step: &validate
        name: Validate
        services:
          - docker
        caches:
          - docker
        script:
          - source set_env.sh
          - *assume-role
          - export SAM_CLI_TELEMETRY=0
          - sam build
          - sam validate
    - step: &lint
        name: Lint
        script:
          - pip install flake8
          - flake8 app/ --verbose
    - step: &migration
        name: Apply migrations
        services:
          - docker
        caches:
          - docker
        script:
          - source set_env.sh
          - *assume-role
          - export SAM_CLI_TELEMETRY=0
          - sam build --use-container --config-env $ENVIRONMENT --debug
          - echo "Migrating $ENVIRONMENT database"
          - >
            docker run
            --entrypoint=""
            --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            --env AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
            --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            --env AWS_KODIT_AUTH_SECRETS_MANAGER_ARN=$AWS_KODIT_AUTH_SECRETS_MANAGER_ARN
            --env AWS_JWT_AUTH_SECRETS_MANAGER_ARN=$AWS_JWT_AUTH_SECRETS_MANAGER_ARN
            appfunction
            alembic upgrade head
    - step: &test
        name: Running Tests
        services:
          - docker
        caches:
          - docker
        script:
          - source set_env.sh
          - *assume-role
          - export SAM_CLI_TELEMETRY=0
          - sam build --use-container --config-env $ENVIRONMENT --debug
          - echo "Running tests in $ENVIRONMENT"
          - >
            docker run
            --entrypoint=""
            --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            --env AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
            --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            --env AWS_KODIT_AUTH_SECRETS_MANAGER_ARN=$AWS_KODIT_AUTH_SECRETS_MANAGER_ARN
            --env AWS_JWT_AUTH_SECRETS_MANAGER_ARN=$AWS_JWT_AUTH_SECRETS_MANAGER_ARN
            appfunction
            pytest
    - step: &deploy
        name: Deploy
        services:
          - docker
        caches:
          - docker
        script:
          - source set_env.sh
          - *assume-role
          - export SAM_CLI_TELEMETRY=0
          - sam build --use-container --config-env $ENVIRONMENT --debug
          - echo "Deploying to $ENVIRONMENT"
          - sam deploy --config-env $ENVIRONMENT --no-confirm-changeset --no-progressbar --resolve-s3
pipelines:
  default:
    - step:
        <<: *set-env
        script:
          - >
            echo export 
            ENVIRONMENT=development
            AWS_KODIT_AUTH_SECRETS_MANAGER_ARN=arn:aws:secretsmanager:eu-central-1:131469615986:secret:KoditAuthSecret-dev-FpWzXN
            AWS_JWT_AUTH_SECRETS_MANAGER_ARN=arn:aws:secretsmanager:eu-central-1:131469615986:secret:JwtAuthSecret-dev-ODz358
            >> set_env.sh
    - step:
        <<: *validate
    - step:
        <<: *lint
    - step:
        <<: *migration
    - step:
        <<: *test
    - step:
        <<: *deploy
        trigger: manual
  branches:
    master:
      - step:
          <<: *set-env
          script:
            - >
              echo export 
              ENVIRONMENT=staging
              AWS_KODIT_AUTH_SECRETS_MANAGER_ARN=arn:aws:secretsmanager:eu-central-1:654468729721:secret:KoditAuthSecret-staging-gxXBPD
              AWS_JWT_AUTH_SECRETS_MANAGER_ARN=arn:aws:secretsmanager:eu-central-1:654468729721:secret:JwtAuthSecret-staging-nB3yd9
              >> set_env.sh
      - step:
          <<: *migration
          name: Migration in staging
      - step:
          <<: *deploy
          name: Deploy to staging
          deployment: staging
      - step:
          <<: *set-env
          script:
            - >
              echo export 
              ENVIRONMENT=production
              AWS_KODIT_AUTH_SECRETS_MANAGER_ARN=arn:aws:secretsmanager:eu-central-1:654468729721:secret:KoditAuthSecret-production-QZnoiH
              AWS_JWT_AUTH_SECRETS_MANAGER_ARN=arn:aws:secretsmanager:eu-central-1:654468729721:secret:JwtAuthSecret-production-X17S6i
              >> set_env.sh
      - step:
          <<: *migration
          trigger: manual
          name: Migration in production
      - step:
          <<: *deploy
          name: Deploy to production
          deployment: production
          trigger: manual
